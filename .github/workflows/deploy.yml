#name: Deploy to Amazon ECS
#
#on:
#  push:
#    branches: [ "main" ]
#
#concurrency:
#  group: deploy
#  cancel-in-progress: true
#
#env:
#  AWS_REGION: ap-northeast-2
#  ECS_SERVICE: physical-theraphy-app-service
#  ECS_CLUSTER: physical-theraphy-ecs-cluster-prod
#  ECS_TASK_DEFINITION: physical-theraphy-task
#
#  CONTAINER_NAME: physicaltherapy-app-api-prod
#
#permissions:
#  contents: read
#
#jobs:
#
#  build-jar:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Calculate short sha
#        id: short-sha
#        # You may pin to the exact commit or the version.
#        uses: benjlevesque/short-sha@v1.2
#        with:
#          # length of the sha1
#          length: 7
#
#      - name: Install JDK 17
#        uses: actions/setup-java@v3.12.0
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#          cache: 'gradle'
#
#      - name: build Jar
#        run: ./gradlew bootJar --build-cache -Dorg.gradle.jvmargs=-Xmx4g
#
#      - name: Cache PhysicalTheraphy build directory
#        uses: actions/cache@v3
#        with:
#          path: ./
#          key: ${{ runner.os }}-physicaltheraphy-build-cache-${{ steps.short-sha.outputs.sha }}
#
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    needs:
#      - build-jar
#    strategy:
#      fail-fast: false
#      matrix:
#        service: [ app-api ] # 추후 배포할 서비스가 늘어나면 여기에 추가하면 됌
#        environment: [ prod ]
#
#    environment: ${{ matrix.service }}-${{ matrix.environment }}
#
#    env:
#      ECR_REPOSITORY: physicaltherapy-${{ matrix.service }}-${{ matrix.environment }}
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    - name: Calculate short sha
#      id: short-sha
#      # You may pin to the exact commit or the version.
#      uses: benjlevesque/short-sha@v1.2
#      with:
#        # length of the sha1
#        length: 7
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Restore Gradle cache directory
#      uses: actions/cache@v3
#      with:
#        path: ./
#        key: ${{ runner.os }}-physicaltheraphy-build-cache-${{ steps.short-sha.outputs.sha }}
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        IMAGE_TAG: ${{ steps.short-sha.outputs.sha }}
#        SERVICE_TAG: ${{ matrix.service }}
#      run: |
#        # Build a docker container and
#        # push it to ECR so that it can
#        # be deployed to ECS.
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $SERVICE_TAG
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#    - name: Restore Gradle cache directory
#      uses: actions/cache@v3
#      with:
#        path: ./
#        key: ${{ runner.os }}-coreserviceorigin-build-cache-${{ steps.short-sha.outputs.sha }}
#
#    - name: Download Task Definition Template
#      run: |
#        aws ecs describe-task-definition \
#          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
#          --query taskDefinition \
#          > task_definition.json
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task_definition.json
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: false
